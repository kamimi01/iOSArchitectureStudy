@startuml

title "iOSアプリのアーキテクチャ採用戦略"

start

partition かなりの小規模アプリ（企業ではほぼ不採用） {
  :アーキテクチャを意識しない\n（全てをViewControllerに書く）;
  :MVC（原初）;

  note right
    iOSアプリではほぼ使用されない
    iOSアプリでMVCといえば、CocoaMVCを指す
  end note
}

partition 中・大規模アプリ（企業での採用レベル） #fff5ee {
  if (プレゼンテーションロジックを\n切り出したいか？) then (no)
    :<b>MVC（CocoaMVC）</b>;

    note left
      ViewとModelを切り離すことができるが
      仲介となるViewControllerがFatになりがち
    end note
    stop
  endif

  if (プレゼンテーションロジックを\n全てテストしたいか？\n（簡単なプレゼンテーションロジックのテストも必要か？）) then (yes)
    :<b>MVP（Passive View）</b>;

    note left
      フロー同期。
      隣り合ったコンポーネント間での
      データの受け渡しが得意だが
      共通したデータを受け渡すのは苦手
      （迷った場合やMVPに不慣れならこっち！）
    end note
    stop
  else (no)
    :<b>MVP（Supervising View）</b>;

    note right
      フロー同期とオブザーバ同期両方。
      オブザーバ同期を使うことによるメリットを教授できるが
      Viewで持つプレゼンテーションロジックをどれにするか
      ModelとViewの接続に使う、適切なイベント粒度の設計が
      難しいため、慣れが必要
    end note
    stop
  endif
}

@enduml